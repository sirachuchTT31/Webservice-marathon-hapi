generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                     Int                  @id @default(autoincrement())
  username               String               @unique @db.VarChar(100)
  password               String               @db.VarChar(100)
  name                   String               @db.VarChar(100)
  lastname               String               @db.VarChar(100)
  email                  String               @db.VarChar(100)
  telephone              String?              @db.VarChar(10)
  address                String?              @db.VarChar(255)
  avatar                 String               @db.LongText
  access_status          String               @db.VarChar(2)
  is_active_notification Boolean              @default(true)
  created_at             DateTime             @default(now()) @db.Timestamp(3)
  created_by             Int?
  updated_at             DateTime             @default(now()) @updatedAt @db.Timestamp(3)
  updated_by             Int?
  ApprovedAccount        ApprovedAccount[]
  Event                  Event[]
  TransactionPayment     TransactionPayment[]
  UserOnEventJoin        UserOnEventJoin[]
  ApprovedEventJoin      ApprovedEventJoin[]
  Invoice                Invoice[]
  Notification           Notification[]
  UserOnRole            UserOnRole[]

  @@map("users")
}

model UserOnRole {
  id      Int  @id @default(autoincrement())
  user_id Int?
  role_id Int?

  Users Users? @relation(fields: [user_id], references: [id], onDelete: SetNull)
  Role  Role?  @relation(fields: [role_id], references: [id], onDelete: SetNull)

  @@map("user_on_role")
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(255)
  UserOnRole UserOnRole[]

  @@map("role")
}

model LoginLog {
  id          Int       @id @default(autoincrement())
  logout_time DateTime?
  type_login  String    @db.VarChar(100)
  user_id     Int?
  created_at  DateTime  @default(now()) @db.Timestamp(3)
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamp(3)

  @@map("login_log")
}

model MasterLocation {
  id         Int      @id @default(autoincrement())
  province   String   @unique @db.VarChar(255)
  district   String   @db.VarChar(255)
  zipcode    String   @db.VarChar(50)
  address    String   @db.VarChar(255)
  is_active  Boolean? @default(false)
  created_at DateTime @default(now()) @db.Timestamp(3)
  created_by Int?
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(3)
  updated_by Int?
  Event      Event[]

  @@map("master_location")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Event {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  due_date        DateTime          @db.Date
  price           Float
  max_amount      Int
  detail          String            @db.VarChar(255)
  distance        String            @db.VarChar(255)
  status_code     String            @db.VarChar(2)
  path_image      String            @db.VarChar(255)
  location_id     Int
  is_active       Boolean?          @default(false)
  created_at      DateTime          @default(now()) @db.Timestamp(3)
  created_by      Int?
  updated_at      DateTime          @default(now()) @updatedAt @db.Timestamp(3)
  updated_by      Int?
  MasterLocation  MasterLocation    @relation(fields: [location_id], references: [id])
  Transaction     Transaction[]
  EventJoin       EventJoin[]
  ApprovedEvent   ApprovedEvent[]
  Invoice         Invoice[]
  Payment         Payment[]
  RecordDataEvent RecordDataEvent[]
  Users           Users?            @relation(fields: [user_id], references: [id])
  user_id         Int?

  @@index([location_id])
  @@map("event")
}

model UserOnEventJoin {
  EventJoin     EventJoin @relation(fields: [event_join_id], references: [id])
  status_code   String?   @db.VarChar(2)
  event_join_id Int
  Users         Users     @relation(fields: [user_id], references: [id])
  user_id       Int
  created_at    DateTime  @default(now()) @db.Timestamp(3)
  created_by    Int?
  updated_at    DateTime  @default(now()) @updatedAt @db.Timestamp(3)
  updated_by    Int?

  @@id([event_join_id, user_id])
  @@map("Users_on_event_join")
}

model EventJoin {
  id                Int                 @id @default(autoincrement())
  description       String?             @db.VarChar(255)
  amount            Int?
  event_id          Int?
  created_at        DateTime            @default(now()) @db.Timestamp(3)
  created_by        Int?
  updated_at        DateTime            @default(now()) @updatedAt @db.Timestamp(3)
  updated_by        Int?
  Event             Event?              @relation(fields: [event_id], references: [id])
  Transaction       Transaction[]
  ApprovedEventJoin ApprovedEventJoin[]
  UserOnEventJoin   UserOnEventJoin[]
  RecordDataEvent   RecordDataEvent[]
  Invoice           Invoice?

  @@index([event_id])
  // @@index([trans_id])
  @@map("event_join")
}

model ApprovedAccount {
  id          Int      @id @default(autoincrement())
  status_code String?  @db.VarChar(2)
  reason      String?  @db.VarChar(255)
  approved_by Int?
  created_at  DateTime @default(now()) @db.Timestamp(3)
  created_by  Int?
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamp(3)
  updated_by  Int?
  Users       Users?   @relation(fields: [user_id], references: [id])
  user_id     Int?

  @@index([user_id])
  @@map("approved_account")
}

model ApprovedEvent {
  id          Int      @id @default(autoincrement())
  status_code String?  @db.VarChar(2)
  reason      String?  @db.VarChar(255)
  event_id    Int?
  approved_by Int?
  created_at  DateTime @default(now()) @db.Timestamp(3)
  created_by  Int?
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamp(3)
  updated_by  Int?
  Event       Event?   @relation(fields: [event_id], references: [id])

  @@index([event_id])
  @@map("approved_event")
}

model ApprovedEventJoin {
  id            Int        @id @default(autoincrement())
  status_code   String?    @db.VarChar(2)
  approved_by   Int?
  reason        String?    @db.VarChar(255)
  event_join_id Int?
  user_id       Int?
  created_at    DateTime   @default(now()) @db.Timestamp(3)
  created_by    Int?
  updated_at    DateTime   @default(now()) @updatedAt @db.Timestamp(3)
  updated_by    Int?
  EventJoin     EventJoin? @relation(fields: [event_join_id], references: [id])
  Users         Users?     @relation(fields: [user_id], references: [id])

  @@index([event_join_id])
  @@map("approved_event_join")
}

model Transaction {
  id            Int        @id @default(autoincrement())
  status        String     @db.VarChar(100)
  type          String     @db.VarChar(50)
  detail        String?    @db.VarChar(100)
  event_join_id Int?
  event_id      Int?
  created_at    DateTime   @default(now()) @db.Timestamp(3)
  created_by    Int?
  updated_at    DateTime   @default(now()) @updatedAt @db.Timestamp(3)
  updated_by    Int?
  Event         Event?     @relation(fields: [event_id], references: [id])
  EventJoin     EventJoin? @relation(fields: [event_join_id], references: [id])

  @@map("transaction")
}

model Invoice {
  id             Int        @id @default(autoincrement())
  invoice_code   String     @db.VarChar(100)
  user_id        Int?
  event_id       Int?
  event_join_id  Int        @unique
  count_print    Int?
  is_active      Boolean    @default(false)
  invoice_detail Json?
  Event          Event?     @relation(fields: [event_id], references: [id])
  EventJoin      EventJoin? @relation(fields: [event_join_id], references: [id])
  Users          Users?     @relation(fields: [user_id], references: [id])
  created_at     DateTime   @default(now()) @db.Timestamp(3)
  created_by     Int?
  updated_at     DateTime   @default(now()) @updatedAt @db.Timestamp(3)
  updated_by     Int?
  Payment        Payment?

  @@map("invoice")
}

model Notification {
  id                   Int      @id @default(autoincrement())
  is_view_notification Boolean
  content              String   @db.VarChar(255)
  user_id              Int?
  Users                Users?   @relation(fields: [user_id], references: [id])
  created_at           DateTime @default(now()) @db.Timestamp(3)
  created_by           Int?
  updated_at           DateTime @default(now()) @updatedAt @db.Timestamp(3)
  updated_by           Int?

  @@map("notification")
}

model Payment {
  id                  Int                @id @default(autoincrement())
  status_code         String             @db.VarChar(2)
  account_bank_number String             @db.VarChar(15)
  account_bank_name   String             @db.VarChar(100)
  total_price         Decimal
  payment_code        String             @db.VarChar(100)
  type_payment        String             @db.VarChar(100)
  invoice_id          Int                @unique
  event_id            Int?
  transpayment_id     Int                @unique
  TransactionPayment  TransactionPayment @relation(fields: [transpayment_id], references: [id])
  Event               Event?             @relation(fields: [event_id], references: [id])
  Invoice             Invoice            @relation(fields: [invoice_id], references: [id])
  created_at          DateTime           @default(now()) @db.Timestamp(3)
  created_by          Int?
  updated_at          DateTime           @default(now()) @updatedAt @db.Timestamp(3)
  updated_by          Int?

  @@map("payment")
}

model TransactionPayment {
  id         Int      @id @default(autoincrement())
  status     String   @db.VarChar(2)
  user_id    Int
  created_at DateTime @default(now()) @db.Timestamp(3)
  created_by Int?
  updated_at DateTime @default(now()) @updatedAt @db.Timestamp(3)
  updated_by Int?
  Payment    Payment?
  Users      Users    @relation(fields: [user_id], references: [id])

  @@map("transaction_payment")
}

model RecordDataEvent {
  id            Int        @id @default(autoincrement())
  is_end        Boolean
  finish_time   DateTime?
  sequence      Int?
  event_id      Int?
  event_join_id Int?
  Event         Event?     @relation(fields: [event_id], references: [id])
  EventJoin     EventJoin? @relation(fields: [event_join_id], references: [id])

  @@map("record_data_event")
}
